"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pdfToPng = void 0;
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const pdf_1 = require("pdfjs-dist/legacy/build/pdf");
const const_1 = require("./const");
const node_canvas_factory_1 = require("./node.canvas.factory");
const props_to_pdf_doc_init_params_1 = require("./props.to.pdf.doc.init.params");
async function pdfToPng(pdfFilePathOrBuffer, props) {
    const isBuffer = Buffer.isBuffer(pdfFilePathOrBuffer);
    const pdfFileBuffer = isBuffer
        ? pdfFilePathOrBuffer
        : await node_fs_1.promises.readFile(pdfFilePathOrBuffer);
    const pdfDocInitParams = (0, props_to_pdf_doc_init_params_1.propsToPdfDocInitParams)(props);
    pdfDocInitParams.data = new Uint8Array(pdfFileBuffer);
    const canvasFactory = new node_canvas_factory_1.NodeCanvasFactory();
    pdfDocInitParams.canvasFactory = canvasFactory;
    const pdfDocument = await (0, pdf_1.getDocument)(pdfDocInitParams).promise;
    const targetedPageNumbers = props?.pagesToProcess !== undefined
        ? props.pagesToProcess
        : Array.from({ length: pdfDocument.numPages }, (_, index) => index + 1);
    if (props?.strictPagesToProcess && targetedPageNumbers.some((pageNum) => pageNum < 1)) {
        throw new Error('Invalid pages requested, page number must be >= 1');
    }
    if (props?.strictPagesToProcess && targetedPageNumbers.some((pageNum) => pageNum > pdfDocument.numPages)) {
        throw new Error('Invalid pages requested, page number must be <= total pages');
    }
    if (props?.outputFolder) {
        await node_fs_1.promises.mkdir(props.outputFolder, { recursive: true });
    }
    let pageName;
    if (props?.outputFileMask) {
        pageName = props.outputFileMask;
    }
    if (!pageName && !isBuffer) {
        pageName = (0, node_path_1.parse)(pdfFilePathOrBuffer).name;
    }
    if (!pageName) {
        pageName = const_1.PDF_TO_PNG_OPTIONS_DEFAULTS.outputFileMask;
    }
    const pngPagesOutput = [];
    for (const pageNumber of targetedPageNumbers) {
        if (pageNumber > pdfDocument.numPages || pageNumber < 1) {
            continue;
        }
        const page = await pdfDocument.getPage(pageNumber);
        const viewport = page.getViewport({
            scale: props?.viewportScale !== undefined
                ? props.viewportScale
                : const_1.PDF_TO_PNG_OPTIONS_DEFAULTS.viewportScale,
        });
        const canvasAndContext = canvasFactory.create(viewport.width, viewport.height);
        const renderContext = {
            canvasContext: canvasAndContext.context,
            viewport,
        };
        await page.render(renderContext).promise;
        const pngPageOutput = {
            pageNumber,
            name: `${pageName}_page_${pageNumber}.png`,
            content: canvasAndContext.canvas.toBuffer(),
            path: '',
            width: viewport.width,
            height: viewport.height,
        };
        canvasFactory.destroy(canvasAndContext);
        page.cleanup();
        if (props?.outputFolder) {
            pngPageOutput.path = (0, node_path_1.resolve)(props.outputFolder, pngPageOutput.name);
            await node_fs_1.promises.writeFile(pngPageOutput.path, pngPageOutput.content);
        }
        pngPagesOutput.push(pngPageOutput);
    }
    await pdfDocument.cleanup();
    return pngPagesOutput;
}
exports.pdfToPng = pdfToPng;
//# sourceMappingURL=pdf.to.png.js.map